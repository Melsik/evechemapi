# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class EquipmentInfoFitting(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cpu: float=None, powergrid: float=None):
        """
        EquipmentInfoFitting - a model defined in Swagger

        :param cpu: The cpu of this EquipmentInfoFitting.
        :type cpu: float
        :param powergrid: The powergrid of this EquipmentInfoFitting.
        :type powergrid: float
        """
        self.swagger_types = {
            'cpu': float,
            'powergrid': float
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'powergrid': 'powergrid'
        }

        self._cpu = cpu
        self._powergrid = powergrid

    @classmethod
    def from_dict(cls, dikt) -> 'EquipmentInfoFitting':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The equipment_info_fitting of this EquipmentInfoFitting.
        :rtype: EquipmentInfoFitting
        """
        return deserialize_model(dikt, cls)

    @property
    def cpu(self) -> float:
        """
        Gets the cpu of this EquipmentInfoFitting.

        :return: The cpu of this EquipmentInfoFitting.
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu: float):
        """
        Sets the cpu of this EquipmentInfoFitting.

        :param cpu: The cpu of this EquipmentInfoFitting.
        :type cpu: float
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")

        self._cpu = cpu

    @property
    def powergrid(self) -> float:
        """
        Gets the powergrid of this EquipmentInfoFitting.

        :return: The powergrid of this EquipmentInfoFitting.
        :rtype: float
        """
        return self._powergrid

    @powergrid.setter
    def powergrid(self, powergrid: float):
        """
        Sets the powergrid of this EquipmentInfoFitting.

        :param powergrid: The powergrid of this EquipmentInfoFitting.
        :type powergrid: float
        """
        if powergrid is None:
            raise ValueError("Invalid value for `powergrid`, must not be `None`")

        self._powergrid = powergrid

