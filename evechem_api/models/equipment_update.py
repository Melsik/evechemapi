# coding: utf-8

from __future__ import absolute_import
from evechem_api.models.link import Link
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class EquipmentUpdate(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, contains: int=None, inputs: List[Link]=None, last_updated: int=None, online: bool=None, outputs: List[Link]=None, resource: int=None):
        """
        EquipmentUpdate - a model defined in Swagger

        :param contains: The contains of this EquipmentUpdate.
        :type contains: int
        :param inputs: The inputs of this EquipmentUpdate.
        :type inputs: List[Link]
        :param last_updated: The last_updated of this EquipmentUpdate.
        :type last_updated: int
        :param online: The online of this EquipmentUpdate.
        :type online: bool
        :param outputs: The outputs of this EquipmentUpdate.
        :type outputs: List[Link]
        :param resource: The resource of this EquipmentUpdate.
        :type resource: int
        """
        self.swagger_types = {
            'contains': int,
            'inputs': List[Link],
            'last_updated': int,
            'online': bool,
            'outputs': List[Link],
            'resource': int
        }

        self.attribute_map = {
            'contains': 'contains',
            'inputs': 'inputs',
            'last_updated': 'last_updated',
            'online': 'online',
            'outputs': 'outputs',
            'resource': 'resource'
        }

        self._contains = contains
        self._inputs = inputs
        self._last_updated = last_updated
        self._online = online
        self._outputs = outputs
        self._resource = resource

    @classmethod
    def from_dict(cls, dikt) -> 'EquipmentUpdate':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The equipment_update of this EquipmentUpdate.
        :rtype: EquipmentUpdate
        """
        return deserialize_model(dikt, cls)

    @property
    def contains(self) -> int:
        """
        Gets the contains of this EquipmentUpdate.

        :return: The contains of this EquipmentUpdate.
        :rtype: int
        """
        return self._contains

    @contains.setter
    def contains(self, contains: int):
        """
        Sets the contains of this EquipmentUpdate.

        :param contains: The contains of this EquipmentUpdate.
        :type contains: int
        """

        self._contains = contains

    @property
    def inputs(self) -> List[Link]:
        """
        Gets the inputs of this EquipmentUpdate.
        Array of input links. 

        :return: The inputs of this EquipmentUpdate.
        :rtype: List[Link]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs: List[Link]):
        """
        Sets the inputs of this EquipmentUpdate.
        Array of input links. 

        :param inputs: The inputs of this EquipmentUpdate.
        :type inputs: List[Link]
        """

        self._inputs = inputs

    @property
    def last_updated(self) -> int:
        """
        Gets the last_updated of this EquipmentUpdate.

        :return: The last_updated of this EquipmentUpdate.
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: int):
        """
        Sets the last_updated of this EquipmentUpdate.

        :param last_updated: The last_updated of this EquipmentUpdate.
        :type last_updated: int
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def online(self) -> bool:
        """
        Gets the online of this EquipmentUpdate.

        :return: The online of this EquipmentUpdate.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online: bool):
        """
        Sets the online of this EquipmentUpdate.

        :param online: The online of this EquipmentUpdate.
        :type online: bool
        """

        self._online = online

    @property
    def outputs(self) -> List[Link]:
        """
        Gets the outputs of this EquipmentUpdate.
        Array of output links. 

        :return: The outputs of this EquipmentUpdate.
        :rtype: List[Link]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs: List[Link]):
        """
        Sets the outputs of this EquipmentUpdate.
        Array of output links. 

        :param outputs: The outputs of this EquipmentUpdate.
        :type outputs: List[Link]
        """

        self._outputs = outputs

    @property
    def resource(self) -> int:
        """
        Gets the resource of this EquipmentUpdate.

        :return: The resource of this EquipmentUpdate.
        :rtype: int
        """
        return self._resource

    @resource.setter
    def resource(self, resource: int):
        """
        Sets the resource of this EquipmentUpdate.

        :param resource: The resource of this EquipmentUpdate.
        :type resource: int
        """

        self._resource = resource

