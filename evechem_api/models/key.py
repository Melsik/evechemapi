# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Key(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, value: str=None, permission: str=None):
        """
        Key - a model defined in Swagger

        :param name: The name of this Key.
        :type name: str
        :param value: The value of this Key.
        :type value: str
        :param permission: The permission of this Key.
        :type permission: str
        """
        self.swagger_types = {
            'name': str,
            'value': str,
            'permission': str
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value',
            'permission': 'permission'
        }

        self._name = name
        self._value = value
        self._permission = permission

    @classmethod
    def from_dict(cls, dikt) -> 'Key':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The key of this Key.
        :rtype: Key
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this Key.

        :return: The name of this Key.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Key.

        :param name: The name of this Key.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self) -> str:
        """
        Gets the value of this Key.

        :return: The value of this Key.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """
        Sets the value of this Key.

        :param value: The value of this Key.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def permission(self) -> str:
        """
        Gets the permission of this Key.

        :return: The permission of this Key.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission: str):
        """
        Sets the permission of this Key.

        :param permission: The permission of this Key.
        :type permission: str
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")

        self._permission = permission

