# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Link(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, target: int=None, source: int=None, material: int=None):
        """
        Link - a model defined in Swagger

        :param target: The target of this Link.
        :type target: int
        :param source: The source of this Link.
        :type source: int
        :param material: The material of this Link.
        :type material: int
        """
        self.swagger_types = {
            'target': int,
            'source': int,
            'material': int
        }

        self.attribute_map = {
            'target': 'target',
            'source': 'source',
            'material': 'material'
        }

        self._target = target
        self._source = source
        self._material = material

    @classmethod
    def from_dict(cls, dikt) -> 'Link':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The link of this Link.
        :rtype: Link
        """
        return deserialize_model(dikt, cls)

    @property
    def target(self) -> int:
        """
        Gets the target of this Link.
        Equipment that is the target of this link. 

        :return: The target of this Link.
        :rtype: int
        """
        return self._target

    @target.setter
    def target(self, target: int):
        """
        Sets the target of this Link.
        Equipment that is the target of this link. 

        :param target: The target of this Link.
        :type target: int
        """

        self._target = target

    @property
    def source(self) -> int:
        """
        Gets the source of this Link.
        Equipment that is the source of this link. 

        :return: The source of this Link.
        :rtype: int
        """
        return self._source

    @source.setter
    def source(self, source: int):
        """
        Sets the source of this Link.
        Equipment that is the source of this link. 

        :param source: The source of this Link.
        :type source: int
        """

        self._source = source

    @property
    def material(self) -> int:
        """
        Gets the material of this Link.
        type_id of the linked material. 

        :return: The material of this Link.
        :rtype: int
        """
        return self._material

    @material.setter
    def material(self, material: int):
        """
        Sets the material of this Link.
        type_id of the linked material. 

        :param material: The material of this Link.
        :type material: int
        """
        if material is None:
            raise ValueError("Invalid value for `material`, must not be `None`")

        self._material = material

