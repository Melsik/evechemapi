# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Link(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, equipment: int=None, input: bool=None, material: int=None):
        """
        Link - a model defined in Swagger

        :param equipment: The equipment of this Link.
        :type equipment: int
        :param input: The input of this Link.
        :type input: bool
        :param material: The material of this Link.
        :type material: int
        """
        self.swagger_types = {
            'equipment': int,
            'input': bool,
            'material': int
        }

        self.attribute_map = {
            'equipment': 'equipment',
            'input': 'input',
            'material': 'material'
        }

        self._equipment = equipment
        self._input = input
        self._material = material

    @classmethod
    def from_dict(cls, dikt) -> 'Link':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The link of this Link.
        :rtype: Link
        """
        return deserialize_model(dikt, cls)

    @property
    def equipment(self) -> int:
        """
        Gets the equipment of this Link.
        Equipment that is the source/target of this link. 

        :return: The equipment of this Link.
        :rtype: int
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment: int):
        """
        Sets the equipment of this Link.
        Equipment that is the source/target of this link. 

        :param equipment: The equipment of this Link.
        :type equipment: int
        """
        if equipment is None:
            raise ValueError("Invalid value for `equipment`, must not be `None`")

        self._equipment = equipment

    @property
    def input(self) -> bool:
        """
        Gets the input of this Link.
        Optional boolean designating if this in an input or output link. 

        :return: The input of this Link.
        :rtype: bool
        """
        return self._input

    @input.setter
    def input(self, input: bool):
        """
        Sets the input of this Link.
        Optional boolean designating if this in an input or output link. 

        :param input: The input of this Link.
        :type input: bool
        """

        self._input = input

    @property
    def material(self) -> int:
        """
        Gets the material of this Link.
        type_id of the linked material. 

        :return: The material of this Link.
        :rtype: int
        """
        return self._material

    @material.setter
    def material(self, material: int):
        """
        Sets the material of this Link.
        type_id of the linked material. 

        :param material: The material of this Link.
        :type material: int
        """
        if material is None:
            raise ValueError("Invalid value for `material`, must not be `None`")

        self._material = material

