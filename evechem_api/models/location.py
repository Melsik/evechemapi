# coding: utf-8

from __future__ import absolute_import
from evechem_api.models.location_system import LocationSystem
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Location(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, moon: int=None, planet: int=None, system: LocationSystem=None):
        """
        Location - a model defined in Swagger

        :param moon: The moon of this Location.
        :type moon: int
        :param planet: The planet of this Location.
        :type planet: int
        :param system: The system of this Location.
        :type system: LocationSystem
        """
        self.swagger_types = {
            'moon': int,
            'planet': int,
            'system': LocationSystem
        }

        self.attribute_map = {
            'moon': 'moon',
            'planet': 'planet',
            'system': 'system'
        }

        self._moon = moon
        self._planet = planet
        self._system = system

    @classmethod
    def from_dict(cls, dikt) -> 'Location':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The location of this Location.
        :rtype: Location
        """
        return deserialize_model(dikt, cls)

    @property
    def moon(self) -> int:
        """
        Gets the moon of this Location.

        :return: The moon of this Location.
        :rtype: int
        """
        return self._moon

    @moon.setter
    def moon(self, moon: int):
        """
        Sets the moon of this Location.

        :param moon: The moon of this Location.
        :type moon: int
        """
        if moon is None:
            raise ValueError("Invalid value for `moon`, must not be `None`")

        self._moon = moon

    @property
    def planet(self) -> int:
        """
        Gets the planet of this Location.

        :return: The planet of this Location.
        :rtype: int
        """
        return self._planet

    @planet.setter
    def planet(self, planet: int):
        """
        Sets the planet of this Location.

        :param planet: The planet of this Location.
        :type planet: int
        """
        if planet is None:
            raise ValueError("Invalid value for `planet`, must not be `None`")

        self._planet = planet

    @property
    def system(self) -> LocationSystem:
        """
        Gets the system of this Location.

        :return: The system of this Location.
        :rtype: LocationSystem
        """
        return self._system

    @system.setter
    def system(self, system: LocationSystem):
        """
        Sets the system of this Location.

        :param system: The system of this Location.
        :type system: LocationSystem
        """

        self._system = system

