# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class MaterialInfo(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, group: int=None, name: str=None, type: int=None, volume: float=None):
        """
        MaterialInfo - a model defined in Swagger

        :param group: The group of this MaterialInfo.
        :type group: int
        :param name: The name of this MaterialInfo.
        :type name: str
        :param type: The type of this MaterialInfo.
        :type type: int
        :param volume: The volume of this MaterialInfo.
        :type volume: float
        """
        self.swagger_types = {
            'group': int,
            'name': str,
            'type': int,
            'volume': float
        }

        self.attribute_map = {
            'group': 'group',
            'name': 'name',
            'type': 'type',
            'volume': 'volume'
        }

        self._group = group
        self._name = name
        self._type = type
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt) -> 'MaterialInfo':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The material_info of this MaterialInfo.
        :rtype: MaterialInfo
        """
        return deserialize_model(dikt, cls)

    @property
    def group(self) -> int:
        """
        Gets the group of this MaterialInfo.
        group_id number material belongs to 

        :return: The group of this MaterialInfo.
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group: int):
        """
        Sets the group of this MaterialInfo.
        group_id number material belongs to 

        :param group: The group of this MaterialInfo.
        :type group: int
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def name(self) -> str:
        """
        Gets the name of this MaterialInfo.
        name of material 

        :return: The name of this MaterialInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this MaterialInfo.
        name of material 

        :param name: The name of this MaterialInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self) -> int:
        """
        Gets the type of this MaterialInfo.
        eve type_id number of material 

        :return: The type of this MaterialInfo.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type: int):
        """
        Sets the type of this MaterialInfo.
        eve type_id number of material 

        :param type: The type of this MaterialInfo.
        :type type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def volume(self) -> float:
        """
        Gets the volume of this MaterialInfo.
        volume in m3 of single material unit 

        :return: The volume of this MaterialInfo.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume: float):
        """
        Sets the volume of this MaterialInfo.
        volume in m3 of single material unit 

        :param volume: The volume of this MaterialInfo.
        :type volume: float
        """
        if volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")

        self._volume = volume

