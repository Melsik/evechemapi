# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class NewEquipment(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, contains: int=None, name: str=None, online: bool=None, resource: int=None, type: int=None):
        """
        NewEquipment - a model defined in Swagger

        :param contains: The contains of this NewEquipment.
        :type contains: int
        :param name: The name of this NewEquipment.
        :type name: str
        :param online: The online of this NewEquipment.
        :type online: bool
        :param resource: The resource of this NewEquipment.
        :type resource: int
        :param type: The type of this NewEquipment.
        :type type: int
        """
        self.swagger_types = {
            'contains': int,
            'name': str,
            'online': bool,
            'resource': int,
            'type': int
        }

        self.attribute_map = {
            'contains': 'contains',
            'name': 'name',
            'online': 'online',
            'resource': 'resource',
            'type': 'type'
        }

        self._contains = contains
        self._name = name
        self._online = online
        self._resource = resource
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'NewEquipment':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The new_equipment of this NewEquipment.
        :rtype: NewEquipment
        """
        return deserialize_model(dikt, cls)

    @property
    def contains(self) -> int:
        """
        Gets the contains of this NewEquipment.

        :return: The contains of this NewEquipment.
        :rtype: int
        """
        return self._contains

    @contains.setter
    def contains(self, contains: int):
        """
        Sets the contains of this NewEquipment.

        :param contains: The contains of this NewEquipment.
        :type contains: int
        """

        self._contains = contains

    @property
    def name(self) -> str:
        """
        Gets the name of this NewEquipment.

        :return: The name of this NewEquipment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this NewEquipment.

        :param name: The name of this NewEquipment.
        :type name: str
        """

        self._name = name

    @property
    def online(self) -> bool:
        """
        Gets the online of this NewEquipment.

        :return: The online of this NewEquipment.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online: bool):
        """
        Sets the online of this NewEquipment.

        :param online: The online of this NewEquipment.
        :type online: bool
        """

        self._online = online

    @property
    def resource(self) -> int:
        """
        Gets the resource of this NewEquipment.

        :return: The resource of this NewEquipment.
        :rtype: int
        """
        return self._resource

    @resource.setter
    def resource(self, resource: int):
        """
        Sets the resource of this NewEquipment.

        :param resource: The resource of this NewEquipment.
        :type resource: int
        """

        self._resource = resource

    @property
    def type(self) -> int:
        """
        Gets the type of this NewEquipment.

        :return: The type of this NewEquipment.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type: int):
        """
        Sets the type of this NewEquipment.

        :param type: The type of this NewEquipment.
        :type type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

