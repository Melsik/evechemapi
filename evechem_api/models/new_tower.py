# coding: utf-8

from __future__ import absolute_import
from evechem_api.models.location import Location
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class NewTower(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cycles_at: int=None, fuel_count: int=None, fuel_last_udpate: int=None, location: Location=None, online: bool=None, owner: int=None, type: int=None):
        """
        NewTower - a model defined in Swagger

        :param cycles_at: The cycles_at of this NewTower.
        :type cycles_at: int
        :param fuel_count: The fuel_count of this NewTower.
        :type fuel_count: int
        :param fuel_last_udpate: The fuel_last_udpate of this NewTower.
        :type fuel_last_udpate: int
        :param location: The location of this NewTower.
        :type location: Location
        :param online: The online of this NewTower.
        :type online: bool
        :param owner: The owner of this NewTower.
        :type owner: int
        :param type: The type of this NewTower.
        :type type: int
        """
        self.swagger_types = {
            'cycles_at': int,
            'fuel_count': int,
            'fuel_last_udpate': int,
            'location': Location,
            'online': bool,
            'owner': int,
            'type': int
        }

        self.attribute_map = {
            'cycles_at': 'cycles_at',
            'fuel_count': 'fuel_count',
            'fuel_last_udpate': 'fuel_last_udpate',
            'location': 'location',
            'online': 'online',
            'owner': 'owner',
            'type': 'type'
        }

        self._cycles_at = cycles_at
        self._fuel_count = fuel_count
        self._fuel_last_udpate = fuel_last_udpate
        self._location = location
        self._online = online
        self._owner = owner
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'NewTower':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The new_tower of this NewTower.
        :rtype: NewTower
        """
        return deserialize_model(dikt, cls)

    @property
    def cycles_at(self) -> int:
        """
        Gets the cycles_at of this NewTower.
        Minute (0-59) in which this tower processes all fuel and silo/reaction cycles. 

        :return: The cycles_at of this NewTower.
        :rtype: int
        """
        return self._cycles_at

    @cycles_at.setter
    def cycles_at(self, cycles_at: int):
        """
        Sets the cycles_at of this NewTower.
        Minute (0-59) in which this tower processes all fuel and silo/reaction cycles. 

        :param cycles_at: The cycles_at of this NewTower.
        :type cycles_at: int
        """
        if cycles_at is not None and cycles_at > 59:
            raise ValueError("Invalid value for `cycles_at`, must be a value less than or equal to `59`")
        if cycles_at is not None and cycles_at < 0:
            raise ValueError("Invalid value for `cycles_at`, must be a value greater than or equal to `0`")

        self._cycles_at = cycles_at

    @property
    def fuel_count(self) -> int:
        """
        Gets the fuel_count of this NewTower.

        :return: The fuel_count of this NewTower.
        :rtype: int
        """
        return self._fuel_count

    @fuel_count.setter
    def fuel_count(self, fuel_count: int):
        """
        Sets the fuel_count of this NewTower.

        :param fuel_count: The fuel_count of this NewTower.
        :type fuel_count: int
        """

        self._fuel_count = fuel_count

    @property
    def fuel_last_udpate(self) -> int:
        """
        Gets the fuel_last_udpate of this NewTower.

        :return: The fuel_last_udpate of this NewTower.
        :rtype: int
        """
        return self._fuel_last_udpate

    @fuel_last_udpate.setter
    def fuel_last_udpate(self, fuel_last_udpate: int):
        """
        Sets the fuel_last_udpate of this NewTower.

        :param fuel_last_udpate: The fuel_last_udpate of this NewTower.
        :type fuel_last_udpate: int
        """

        self._fuel_last_udpate = fuel_last_udpate

    @property
    def location(self) -> Location:
        """
        Gets the location of this NewTower.

        :return: The location of this NewTower.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location: Location):
        """
        Sets the location of this NewTower.

        :param location: The location of this NewTower.
        :type location: Location
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def online(self) -> bool:
        """
        Gets the online of this NewTower.
        Online/offline status boolean. 

        :return: The online of this NewTower.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online: bool):
        """
        Sets the online of this NewTower.
        Online/offline status boolean. 

        :param online: The online of this NewTower.
        :type online: bool
        """
        if online is None:
            raise ValueError("Invalid value for `online`, must not be `None`")

        self._online = online

    @property
    def owner(self) -> int:
        """
        Gets the owner of this NewTower.

        :return: The owner of this NewTower.
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner: int):
        """
        Sets the owner of this NewTower.

        :param owner: The owner of this NewTower.
        :type owner: int
        """

        self._owner = owner

    @property
    def type(self) -> int:
        """
        Gets the type of this NewTower.

        :return: The type of this NewTower.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type: int):
        """
        Sets the type of this NewTower.

        :param type: The type of this NewTower.
        :type type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

