# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Operation(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, master_key: str=None, name: str=None, public_name: str=None, tower_count: int=None, sub_key_count: int=None):
        """
        Operation - a model defined in Swagger

        :param master_key: The master_key of this Operation.
        :type master_key: str
        :param name: The name of this Operation.
        :type name: str
        :param public_name: The public_name of this Operation.
        :type public_name: str
        :param tower_count: The tower_count of this Operation.
        :type tower_count: int
        :param sub_key_count: The sub_key_count of this Operation.
        :type sub_key_count: int
        """
        self.swagger_types = {
            'master_key': str,
            'name': str,
            'public_name': str,
            'tower_count': int,
            'sub_key_count': int
        }

        self.attribute_map = {
            'master_key': 'master_key',
            'name': 'name',
            'public_name': 'public_name',
            'tower_count': 'tower_count',
            'sub_key_count': 'sub_key_count'
        }

        self._master_key = master_key
        self._name = name
        self._public_name = public_name
        self._tower_count = tower_count
        self._sub_key_count = sub_key_count

    @classmethod
    def from_dict(cls, dikt) -> 'Operation':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The operation of this Operation.
        :rtype: Operation
        """
        return deserialize_model(dikt, cls)

    @property
    def master_key(self) -> str:
        """
        Gets the master_key of this Operation.
        Master Access Key for this Operation

        :return: The master_key of this Operation.
        :rtype: str
        """
        return self._master_key

    @master_key.setter
    def master_key(self, master_key: str):
        """
        Sets the master_key of this Operation.
        Master Access Key for this Operation

        :param master_key: The master_key of this Operation.
        :type master_key: str
        """

        self._master_key = master_key

    @property
    def name(self) -> str:
        """
        Gets the name of this Operation.
        Private Name (not viewable by `customer` type keys)

        :return: The name of this Operation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Operation.
        Private Name (not viewable by `customer` type keys)

        :param name: The name of this Operation.
        :type name: str
        """

        self._name = name

    @property
    def public_name(self) -> str:
        """
        Gets the public_name of this Operation.
        Name viewable by `customer` type keys

        :return: The public_name of this Operation.
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name: str):
        """
        Sets the public_name of this Operation.
        Name viewable by `customer` type keys

        :param public_name: The public_name of this Operation.
        :type public_name: str
        """

        self._public_name = public_name

    @property
    def tower_count(self) -> int:
        """
        Gets the tower_count of this Operation.
        Total operation tower count

        :return: The tower_count of this Operation.
        :rtype: int
        """
        return self._tower_count

    @tower_count.setter
    def tower_count(self, tower_count: int):
        """
        Sets the tower_count of this Operation.
        Total operation tower count

        :param tower_count: The tower_count of this Operation.
        :type tower_count: int
        """

        self._tower_count = tower_count

    @property
    def sub_key_count(self) -> int:
        """
        Gets the sub_key_count of this Operation.
        Total sub-keys active for this operation

        :return: The sub_key_count of this Operation.
        :rtype: int
        """
        return self._sub_key_count

    @sub_key_count.setter
    def sub_key_count(self, sub_key_count: int):
        """
        Sets the sub_key_count of this Operation.
        Total sub-keys active for this operation

        :param sub_key_count: The sub_key_count of this Operation.
        :type sub_key_count: int
        """

        self._sub_key_count = sub_key_count

