# coding: utf-8

from __future__ import absolute_import
from evechem_api.models.equipment import Equipment
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Process(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, equipment: List[int]=None, final_outputs: List[int]=None, id: float=None):
        """
        Process - a model defined in Swagger

        :param equipment: The equipment of this Process.
        :type equipment: List[int]
        :param final_outputs: The final_outputs of this Process.
        :type final_outputs: List[int]
        :param id: The id of this Process.
        :type id: float
        """ 
        self.swagger_types = {
            'equipment': List[int],
            'final_outputs': List[int],
            'id': float
        }

        self.attribute_map = {
            'equipment': 'equipment',
            'final_outputs': 'final_outputs',
            'id': 'id'
        }

        self._equipment = equipment
        self._final_outputs = final_outputs
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'Process':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The process of this Process.
        :rtype: Process
        """
        return deserialize_model(dikt, cls)

    @property
    def equipment(self) -> List[int]:
        """
        Gets the equipment of this Process.

        :return: The equipment of this Process.
        :rtype: List[int]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment: List[int]):
        """
        Sets the equipment of this Process.

        :param equipment: The equipment of this Process.
        :type equipment: List[int]
        """

        self._equipment = equipment

    @property
    def final_outputs(self) -> List[int]:
        """
        Gets the final_outputs of this Process.
        Final products' material ids for this process tree. 

        :return: The final_outputs of this Process.
        :rtype: List[int]
        """
        return self._final_outputs

    @final_outputs.setter
    def final_outputs(self, final_outputs: List[int]):
        """
        Sets the final_outputs of this Process.
        Final products' material ids for this process tree. 

        :param final_outputs: The final_outputs of this Process.
        :type final_outputs: List[int]
        """

        self._final_outputs = final_outputs

    @property
    def id(self) -> float:
        """
        Gets the id of this Process.
        Unique process id number. 

        :return: The id of this Process.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id: float):
        """
        Sets the id of this Process.
        Unique process id number. 

        :param id: The id of this Process.
        :type id: float
        """

        self._id = id

