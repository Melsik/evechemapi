# coding: utf-8

from __future__ import absolute_import
from evechem_api.models.reaction_outputs import ReactionOutputs
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Reaction(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, inputs: List[ReactionOutputs]=None, name: str=None, outputs: List[ReactionOutputs]=None, type: int=None):
        """
        Reaction - a model defined in Swagger

        :param inputs: The inputs of this Reaction.
        :type inputs: List[ReactionOutputs]
        :param name: The name of this Reaction.
        :type name: str
        :param outputs: The outputs of this Reaction.
        :type outputs: List[ReactionOutputs]
        :param type: The type of this Reaction.
        :type type: int
        """
        self.swagger_types = {
            'inputs': List[ReactionOutputs],
            'name': str,
            'outputs': List[ReactionOutputs],
            'type': int
        }

        self.attribute_map = {
            'inputs': 'inputs',
            'name': 'name',
            'outputs': 'outputs',
            'type': 'type'
        }

        self._inputs = inputs
        self._name = name
        self._outputs = outputs
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Reaction':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The reaction of this Reaction.
        :rtype: Reaction
        """
        return deserialize_model(dikt, cls)

    @property
    def inputs(self) -> List[ReactionOutputs]:
        """
        Gets the inputs of this Reaction.
        input material types and amounts 

        :return: The inputs of this Reaction.
        :rtype: List[ReactionOutputs]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs: List[ReactionOutputs]):
        """
        Sets the inputs of this Reaction.
        input material types and amounts 

        :param inputs: The inputs of this Reaction.
        :type inputs: List[ReactionOutputs]
        """

        self._inputs = inputs

    @property
    def name(self) -> str:
        """
        Gets the name of this Reaction.
        name of reaction 

        :return: The name of this Reaction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Reaction.
        name of reaction 

        :param name: The name of this Reaction.
        :type name: str
        """

        self._name = name

    @property
    def outputs(self) -> List[ReactionOutputs]:
        """
        Gets the outputs of this Reaction.
        output material types and amounts 

        :return: The outputs of this Reaction.
        :rtype: List[ReactionOutputs]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs: List[ReactionOutputs]):
        """
        Sets the outputs of this Reaction.
        output material types and amounts 

        :param outputs: The outputs of this Reaction.
        :type outputs: List[ReactionOutputs]
        """

        self._outputs = outputs

    @property
    def type(self) -> int:
        """
        Gets the type of this Reaction.
        eve type_id number of material 

        :return: The type of this Reaction.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type: int):
        """
        Sets the type of this Reaction.
        eve type_id number of material 

        :param type: The type of this Reaction.
        :type type: int
        """

        self._type = type

