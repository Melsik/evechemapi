# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ReactionMaterial(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type: int=None, name: str=None, amount: int=None, ):
        """
        ReactionMaterial - a model defined in Swagger

        :param amount: The amount of this ReactionMaterial.
        :type amount: int
        :param type: The type of this ReactionMaterial.
        :type type: int
        :param name: The name of this ReactionMaterial.
        :type name: str
        """
        self.swagger_types = {
            'type': int,
            'name': str,
            'amount': int
        }

        self.attribute_map = {
            'type': 'type',
            'name': 'name',
            'amount': 'amount'            
        }

        self._type = type
        self._name = name
        self._amount = amount
        

    @classmethod
    def from_dict(cls, dikt) -> 'ReactionMaterial':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The reaction_material of this ReactionMaterial.
        :rtype: ReactionMaterial
        """
        return deserialize_model(dikt, cls)

    @property
    def amount(self) -> int:
        """
        Gets the amount of this ReactionMaterial.

        :return: The amount of this ReactionMaterial.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """
        Sets the amount of this ReactionMaterial.

        :param amount: The amount of this ReactionMaterial.
        :type amount: int
        """

        self._amount = amount

    @property
    def type(self) -> int:
        """
        Gets the type of this ReactionMaterial.

        :return: The type of this ReactionMaterial.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type: int):
        """
        Sets the type of this ReactionMaterial.

        :param type: The type of this ReactionMaterial.
        :type type: int
        """

        self._type = type

    @property
    def name(self) -> str:
        """
        Gets the name of this ReactionMaterial.

        :return: The name of this ReactionMaterial.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this ReactionMaterial.

        :param name: The name of this ReactionMaterial.
        :type name: str
        """

        self._name = name

