# coding: utf-8

from __future__ import absolute_import
from evechem_api.models.location import Location
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class TowerDetails(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cycles_at: int=None, fuel_count: int=None, fuel_last_update: int=None, id: int=None, location: Location=None, name: str=None, online: bool=None, processes: List[int]=None, sov: bool=None, type: int=None):
        """
        TowerDetails - a model defined in Swagger

        :param cycles_at: The cycles_at of this TowerDetails.
        :type cycles_at: int
        :param fuel_count: The fuel_count of this TowerDetails.
        :type fuel_count: int
        :param fuel_last_update: The fuel_last_update of this TowerDetails.
        :type fuel_last_update: int
        :param id: The id of this TowerDetails.
        :type id: int
        :param location: The location of this TowerDetails.
        :type location: Location
        :param name: The name of this TowerDetails.
        :type name: str
        :param online: The online of this TowerDetails.
        :type online: bool
        :param processes: The processes of this TowerDetails.
        :type processes: List[int]
        :param sov: The sov of this TowerDetails.
        :type sov: bool
        :param type: The type of this TowerDetails.
        :type type: int
        """
        self.swagger_types = {
            'cycles_at': int,
            'fuel_count': int,
            'fuel_last_update': int,
            'id': int,
            'location': Location,
            'name': str,
            'online': bool,
            'processes': List[int],
            'sov': bool,
            'type': int
        }

        self.attribute_map = {
            'cycles_at': 'cycles_at',
            'fuel_count': 'fuel_count',
            'fuel_last_update': 'fuel_last_update',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'online': 'online',
            'processes': 'processes',
            'sov': 'sov',
            'type': 'type'
        }

        self._cycles_at = cycles_at
        self._fuel_count = fuel_count
        self._fuel_last_update = fuel_last_update
        self._id = id
        self._location = location
        self._name = name
        self._online = online
        self._processes = processes
        self._sov = sov
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'TowerDetails':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tower_details of this TowerDetails.
        :rtype: TowerDetails
        """
        return deserialize_model(dikt, cls)

    @property
    def cycles_at(self) -> int:
        """
        Gets the cycles_at of this TowerDetails.
        Minute (0-59) in which this tower processes all fuel and silo/reaction cycles. 

        :return: The cycles_at of this TowerDetails.
        :rtype: int
        """
        return self._cycles_at

    @cycles_at.setter
    def cycles_at(self, cycles_at: int):
        """
        Sets the cycles_at of this TowerDetails.
        Minute (0-59) in which this tower processes all fuel and silo/reaction cycles. 

        :param cycles_at: The cycles_at of this TowerDetails.
        :type cycles_at: int
        """
        if cycles_at is not None and cycles_at > 59:
            raise ValueError("Invalid value for `cycles_at`, must be a value less than or equal to `59`")
        if cycles_at is not None and cycles_at < 0:
            raise ValueError("Invalid value for `cycles_at`, must be a value greater than or equal to `0`")

        self._cycles_at = cycles_at

    @property
    def fuel_count(self) -> int:
        """
        Gets the fuel_count of this TowerDetails.

        :return: The fuel_count of this TowerDetails.
        :rtype: int
        """
        return self._fuel_count

    @fuel_count.setter
    def fuel_count(self, fuel_count: int):
        """
        Sets the fuel_count of this TowerDetails.

        :param fuel_count: The fuel_count of this TowerDetails.
        :type fuel_count: int
        """

        self._fuel_count = fuel_count

    @property
    def fuel_last_update(self) -> int:
        """
        Gets the fuel_last_update of this TowerDetails.

        :return: The fuel_last_update of this TowerDetails.
        :rtype: int
        """
        return self._fuel_last_update

    @fuel_last_update.setter
    def fuel_last_update(self, fuel_last_update: int):
        """
        Sets the fuel_last_update of this TowerDetails.

        :param fuel_last_update: The fuel_last_update of this TowerDetails.
        :type fuel_last_update: int
        """

        self._fuel_last_update = fuel_last_update

    @property
    def id(self) -> int:
        """
        Gets the id of this TowerDetails.

        :return: The id of this TowerDetails.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this TowerDetails.

        :param id: The id of this TowerDetails.
        :type id: int
        """

        self._id = id

    @property
    def location(self) -> Location:
        """
        Gets the location of this TowerDetails.

        :return: The location of this TowerDetails.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location: Location):
        """
        Sets the location of this TowerDetails.

        :param location: The location of this TowerDetails.
        :type location: Location
        """

        self._location = location

    @property
    def name(self) -> str:
        """
        Gets the name of this TowerDetails.

        :return: The name of this TowerDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this TowerDetails.

        :param name: The name of this TowerDetails.
        :type name: str
        """

        self._name = name

    @property
    def online(self) -> bool:
        """
        Gets the online of this TowerDetails.
        Online/offline status boolean. 

        :return: The online of this TowerDetails.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online: bool):
        """
        Sets the online of this TowerDetails.
        Online/offline status boolean. 

        :param online: The online of this TowerDetails.
        :type online: bool
        """

        self._online = online

    @property
    def processes(self) -> List[int]:
        """
        Gets the processes of this TowerDetails.
        Process Ids that this tower has set up. 

        :return: The processes of this TowerDetails.
        :rtype: List[int]
        """
        return self._processes

    @processes.setter
    def processes(self, processes: List[int]):
        """
        Sets the processes of this TowerDetails.
        Process Ids that this tower has set up. 

        :param processes: The processes of this TowerDetails.
        :type processes: List[int]
        """

        self._processes = processes

    @property
    def sov(self) -> bool:
        """
        Gets the sov of this TowerDetails.
        Whether or not the tower is anchored with a sovereignty fuel bonus active. 

        :return: The sov of this TowerDetails.
        :rtype: bool
        """
        return self._sov

    @sov.setter
    def sov(self, sov: bool):
        """
        Sets the sov of this TowerDetails.
        Whether or not the tower is anchored with a sovereignty fuel bonus active. 

        :param sov: The sov of this TowerDetails.
        :type sov: bool
        """

        self._sov = sov

    @property
    def type(self) -> int:
        """
        Gets the type of this TowerDetails.

        :return: The type of this TowerDetails.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type: int):
        """
        Sets the type of this TowerDetails.

        :param type: The type of this TowerDetails.
        :type type: int
        """

        self._type = type

